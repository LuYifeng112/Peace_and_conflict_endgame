on_actions = {
	# country 
	on_new_term_election = {
	
	}

	# Ace pilots
	# country, FROM = ace
	on_ace_promoted = {
		
	}

	# country, FROM = ace, PREV = enemy ace 
	# This event fires twice, once for each ace.
	on_aces_killed_each_other = {
		
	}
	
	# country, FROM = our ace, 
	# PREV = enemy ace, has killed FROM
	on_ace_killed_by_ace = {
		
	}

	# country, FROM = our ace, 
	# PREV = enemy ace, killed by FROM
	on_ace_killed_other_ace = {
		
	}

	# our ace is killed by no name
	# country, FROM = ace
	on_ace_killed = {
		
	}
	
	# our ace died in accident
	# country, FROM = ace
	on_ace_killed_on_accident = {
	
	}
	
	# enemy ace is killed by our non name
	# country, FROM = enemy ace
	on_non_ace_killed_other_ace = {
	
	}

	# During justifying wargoals
	# triggered daily, so make sure there is a sink somewhere not firing events
	# country, FROM = target nation
	on_justifying_wargoal_pulse = {

		
	}

	on_wargoal_expire = {
		
	}

	on_nuke_drop = {

		
	}

	# country random events
	#on_bi_yearly_pulse = {
	#
	#}

	#on_five_year_pulse = {
	#
	#}

	on_border_war_lost = {
		
	}
	
	on_leave_faction = {
		
	}

	#FROM is the one that joins the faction
	on_create_faction = {
	}

	#FROM is country getting invited.
	on_offer_join_faction = {
	}

	#FROM is faction leader on join faction requests. THIS DOES NOT FIRE ON ADD_TO_FACTION EFFECT! USE ON_OFFER_JOIN_FACTION!
	on_join_faction = {
	}

	#FROM is war target
	on_declare_war = {
	}
	
	# When a new faction is formed
	on_faction_formed = {
	}
	
	# ROOT is capitulated country, FROM is winner
	on_capitulation = {
	}

	# ROOT is previously capitulated country
	on_uncapitulation = {
	}

	on_government_change = {
	}

	on_coup_succeeded = {
	}

	#ROOT is winner #FROM gets annexed - This will also fire on_annex
	on_civil_war_end = {
	}

	#used when puppeting in a peace conference
	#ROOT = nation being puppeted, FROM = overlord
	
	on_puppet = {
	}
	
	#used when puppeting through the occupied territories menu during peace time (or when releasing from non-core but owned territory, f.e. Britain releasing Egypt)
	#ROOT = nation being released, FROM = overlord
	
	on_release_as_puppet = {
	}
	
	#ROOT is winner #FROM gets annexed - For civil wars on_civil_war_end is also fired
	on_annex = {
		effect = {
			
		}
	}

	#Not run on a specific country.
	on_startup = {
	}
	
	on_unit_leader_created = {
		effect = {
		}
	}

	#ROOT is new controller #FROM is old controller #FROM.FROM is state ID
	on_state_control_changed = {
	}
	
	on_unit_leader_level_up = {
		effect = {
			
		}
	}
	
	# From is owner country
	on_army_leader_daily = {
	}
	
	# From is owner country
	on_army_leader_won_combat = {
		effect = {
			if = {
				limit = {
					set_temp_variable = { chance = 0.001 }
					set_temp_variable = { factor = 1.0 }
					add_to_temp_variable = { factor = leader_modifier@wounded_chance_factor } 
					multiply_temp_variable = { chance = factor }
					check_variable = { random < chance }
					NOT = { has_trait = wounded }
				}
				add_timed_unit_leader_trait = {
					trait = wounded
					days = 90
				}
				unit_leader_event = { id = generic.18 }
			}
		}
	}
	
	# From is owner country
	on_army_leader_lost_combat = {
		effect = {
			if = {
				limit = {
					set_temp_variable = { chance = 0.005 }
					set_temp_variable = { factor = 1.0 }
					add_to_temp_variable = { factor = leader_modifier@wounded_chance_factor } 
					multiply_temp_variable = { chance = factor }
					check_variable = { random < chance }
					NOT = { has_trait = wounded }
				}
				add_timed_unit_leader_trait = {
					trait = wounded
					days = 90
				}
				unit_leader_event = { id = generic.18 }
			}
		}
	}
	
	on_army_leader_promoted = {
		effect = {
			add_timed_unit_leader_trait = {
				trait = recently_promoted
				days = 100
			}
		}
	}
	
	# root country that invades
	# scope state that is invaded
	# from scope state that the invasion started
	# on_naval_invasion = {
	# 	effect = {
	# 	}
	# }
	
	
	# root country that paradrops
	# scope state that is paradroped into
	# from scope state that the paradrop started
	on_paradrop = {
	    effect = {
		    set_country_flag = has_paradropped_flag
		}
	}
	on_ruling_party_change = { 
		effect = {
			every_owned_state = {
				limit = {
					is_controlled_by = ROOT
					NOT = {
						is_core_of = ROOT
					}
				}

				set_temp_variable = { comp_change = random }
				multiply_temp_variable = { comp_change = -15 }
				add_to_temp_variable = { comp_change = -10 }

				add_compliance = comp_change
			}
		}
	}
}
